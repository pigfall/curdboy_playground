
// AUTO GENERATED BY CURDBOY. NOT EDIT!!!
package biz

import(
	
	"context"
	
	"github.com/pigfall/curdboy_playground/ent"
	
	pb "github.com/pigfall/curdboy_playground/api/v1/contacts"
	
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	
	"entgo.io/ent/dialect/sql/sqlgraph"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)





// 定义 data 层接口

type DataDeptServiceIfce interface{
	
		Create (context.Context,*pb.Dept)(id string,err error)
		
	
		Update (context.Context,*pb.Dept)(err error)
		
	
		Delete (ctx context.Context,id string)(error)
		
	
		FindById (ctx context.Context,id string)(*ent.Dept,error)
		
	
		Find (context.Context,*pb.DeptPageQuery)([]*ent.Dept,int,error)
		
	
		Count (context.Context,*pb.Dept)(int32,error)
	
		AddUser (context.Context,*pb.DeptAddUserReq)(id string,err error)
	
		AddUserById (context.Context,*pb.DeptIdAndUserId)(error)
	
		RemoveUser (context.Context,*pb.DeptRemoveUserReq)(error)
	
		FindUsers (context.Context,*pb.DeptFindUsersReq)(data []*ent.User,total int,err error)
	
}

// 定义 biz struct

type DeptService struct{
	dataIns DataDeptServiceIfce
}

// 定义构造方法
func NewDeptService(dataIns DataDeptServiceIfce) *DeptService{
	return &DeptService{
		dataIns:dataIns,
	}
}

// 定义 biz struct method

	
		func (this *DeptService) Create (ctx context.Context,req *pb.Dept)(*pb.DeptId,error){
			id,err := this.dataIns.Create(ctx,req)
			if err != nil{
				if sqlgraph.IsUniqueConstraintError(err){
					return nil,pb.ErrorRecordHasExists(err.Error())
				}
				return nil,err
			}
			return &pb.DeptId{
				DeptId : id,
			},nil
		}
	
	

	
		func (this *DeptService) Update (ctx context.Context,req *pb.Dept)(*emptypb.Empty,error){
			err := this.dataIns.Update(ctx,req)
			if err != nil{
				return nil,err
			}
			return &emptypb.Empty{},nil
		}
	
	

	
		func (this *DeptService) Delete (ctx context.Context,req *pb.DeptId)(*emptypb.Empty,error){
			err := this.dataIns.Delete(ctx,req.GetDeptId())
			if err != nil{
				return nil,err
			}
			return &emptypb.Empty{},nil
		}
	
	

	
		func (this *DeptService) FindById (ctx context.Context,req  *pb.DeptId)(*pb.Dept,error){
			model, err := this.dataIns.FindById(ctx,req.GetDeptId())
			if err != nil{
				return nil,err
			}
			return toPBDept(model),nil
		}
	

	func (this *DeptService) Find (ctx context.Context,req  *pb.DeptPageQuery)(*pb.DeptWithCount,error){
			
			models,count, err := this.dataIns.Find(ctx,req)
			if err != nil{
				return nil,err
			}
			output := make([]*pb.Dept,0,len(models))
			for _, m := range models{
				output = append(output,toPBDept(m))
			}
			ret := &pb.DeptWithCount{
				Depts:output,
			}
			if req.PageDataCount.GetValue(){
				ret.DataCount= wrapperspb.Int32(int32(count))
			}
			return ret,nil
		}
	

	func (this *DeptService) Count (ctx context.Context,req  *pb.Dept)(*pb.CountNumber,error){
			value , err := this.dataIns.Count(ctx,req)
			if err != nil{
				return nil,err
			}
			return &pb.CountNumber{
				Value:value,
			},nil
		}
	

	
		func (this *DeptService) AddUser (ctx context.Context,req  *pb.DeptAddUserReq)(*pb.UserId,error){
			id, err := this.dataIns.AddUser(ctx,req)
			if err != nil{
				return nil,err
			}
			
			
					return &pb.UserId{
						UserId : id,
					},nil
		}
	

	
		func (this *DeptService) AddUserById (ctx context.Context,req  *pb.DeptIdAndUserId)(*emptypb.Empty,error){
			err :=  this.dataIns.AddUserById(ctx,req)
			if err != nil{
				if sqlgraph.IsForeignKeyConstraintError(err){
					return nil,err
				}
			}
			return &emptypb.Empty{},nil
		}
	

	
		func (this *DeptService) RemoveUser (ctx context.Context,req  *pb.DeptRemoveUserReq)(*emptypb.Empty,error){
			err :=  this.dataIns.RemoveUser(ctx,req)
			if err != nil{
				return nil,err
			}
			return &emptypb.Empty{},nil
		}
	

	
		func (this *DeptService) FindUsers (ctx context.Context,req *pb.DeptFindUsersReq)(*pb.DeptFindUsersRes,error){
			data,total,err := this.dataIns.FindUsers(ctx,req)
			if err != nil{
				return nil,err
			}
			pbData := make([]*pb.User,len(data))
			for i:=0;i<len(data);i++{
				pbData[i] =toPBUser(data[i])
			}
			return &pb.DeptFindUsersRes{
				DataCount:int32(total),
				Users:pbData,
			},nil
		}
	


