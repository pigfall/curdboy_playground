
// AUTO GENERATED BY CURDBOY. NOT EDIT!!!
package biz

import(
	
	"context"
	
	"github.com/pigfall/curdboy_playground/ent"
	
	pb "github.com/pigfall/curdboy_playground/api/v1/contacts"
	
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	
	"entgo.io/ent/dialect/sql/sqlgraph"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)





// 定义 data 层接口

type DataCarServiceIfce interface{
	
		Create (context.Context,*pb.Car)(id string,err error)
		
	
		Update (context.Context,*pb.Car)(err error)
		
	
		Delete (ctx context.Context,id string)(error)
		
	
		FindById (ctx context.Context,id string)(*ent.Car,error)
		
	
		Find (context.Context,*pb.CarPageQuery)([]*ent.Car,int,error)
		
	
		Count (context.Context,*pb.Car)(int32,error)
	
}

// 定义 biz struct

type CarService struct{
	dataIns DataCarServiceIfce
}

// 定义构造方法
func NewCarService(dataIns DataCarServiceIfce) *CarService{
	return &CarService{
		dataIns:dataIns,
	}
}

// 定义 biz struct method

	
		func (this *CarService) Create (ctx context.Context,req *pb.Car)(*pb.CarId,error){
			id,err := this.dataIns.Create(ctx,req)
			if err != nil{
				if sqlgraph.IsUniqueConstraintError(err){
					return nil,pb.ErrorRecordHasExists(err.Error())
				}
				return nil,err
			}
			return &pb.CarId{
				CarId : id,
			},nil
		}
	
	

	
		func (this *CarService) Update (ctx context.Context,req *pb.Car)(*emptypb.Empty,error){
			err := this.dataIns.Update(ctx,req)
			if err != nil{
				return nil,err
			}
			return &emptypb.Empty{},nil
		}
	
	

	
		func (this *CarService) Delete (ctx context.Context,req *pb.CarId)(*emptypb.Empty,error){
			err := this.dataIns.Delete(ctx,req.GetCarId())
			if err != nil{
				return nil,err
			}
			return &emptypb.Empty{},nil
		}
	
	

	
		func (this *CarService) FindById (ctx context.Context,req  *pb.CarId)(*pb.Car,error){
			model, err := this.dataIns.FindById(ctx,req.GetCarId())
			if err != nil{
				return nil,err
			}
			return toPBCar(model),nil
		}
	

	func (this *CarService) Find (ctx context.Context,req  *pb.CarPageQuery)(*pb.CarWithCount,error){
			
			models,count, err := this.dataIns.Find(ctx,req)
			if err != nil{
				return nil,err
			}
			output := make([]*pb.Car,0,len(models))
			for _, m := range models{
				output = append(output,toPBCar(m))
			}
			ret := &pb.CarWithCount{
				Cars:output,
			}
			if req.PageDataCount.GetValue(){
				ret.DataCount= wrapperspb.Int32(int32(count))
			}
			return ret,nil
		}
	

	func (this *CarService) Count (ctx context.Context,req  *pb.Car)(*pb.CountNumber,error){
			value , err := this.dataIns.Count(ctx,req)
			if err != nil{
				return nil,err
			}
			return &pb.CountNumber{
				Value:value,
			},nil
		}
	


