
// AUTO GENERATED BY CURDBOY. NOT EDIT!!!
package biz

import(
	
	"context"
	
	"github.com/pigfall/curdboy_playground/ent"
	
	pb "github.com/pigfall/curdboy_playground/api/v1/contacts"
	
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	
	"entgo.io/ent/dialect/sql/sqlgraph"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)





// 定义 data 层接口

type DataUserServiceIfce interface{
	
		Create (context.Context,*pb.User)(id string,err error)
		
	
		Update (context.Context,*pb.User)(err error)
		
	
		Delete (ctx context.Context,id string)(error)
		
	
		FindById (ctx context.Context,id string)(*ent.User,error)
		
	
		Find (context.Context,*pb.UserPageQuery)([]*ent.User,int,error)
		
	
		Count (context.Context,*pb.User)(int32,error)
	
		AddCar (context.Context,*pb.Car)(id string,err error)
	
		AddCarById (context.Context,*pb.UserIdAndCarId)(error)
	
		RemoveCar (context.Context,*pb.UserRemoveCarReq)(error)
	
		FindCars (context.Context,*pb.UserFindCarsReq)(data []*ent.Car,total int,err error)
	
		FindDepts (context.Context,*pb.UserFindDeptsReq)(data []*ent.Dept,total int,err error)
	
}

// 定义 biz struct

type UserService struct{
	dataIns DataUserServiceIfce
}

// 定义构造方法
func NewUserService(dataIns DataUserServiceIfce) *UserService{
	return &UserService{
		dataIns:dataIns,
	}
}

// 定义 biz struct method

	
		func (this *UserService) Create (ctx context.Context,req *pb.User)(*pb.UserId,error){
			id,err := this.dataIns.Create(ctx,req)
			if err != nil{
				if sqlgraph.IsUniqueConstraintError(err){
					return nil,pb.ErrorRecordHasExists(err.Error())
				}
				return nil,err
			}
			return &pb.UserId{
				UserId : id,
			},nil
		}
	
	

	
		func (this *UserService) Update (ctx context.Context,req *pb.User)(*emptypb.Empty,error){
			err := this.dataIns.Update(ctx,req)
			if err != nil{
				return nil,err
			}
			return &emptypb.Empty{},nil
		}
	
	

	
		func (this *UserService) Delete (ctx context.Context,req *pb.UserId)(*emptypb.Empty,error){
			err := this.dataIns.Delete(ctx,req.GetUserId())
			if err != nil{
				return nil,err
			}
			return &emptypb.Empty{},nil
		}
	
	

	
		func (this *UserService) FindById (ctx context.Context,req  *pb.UserId)(*pb.User,error){
			model, err := this.dataIns.FindById(ctx,req.GetUserId())
			if err != nil{
				return nil,err
			}
			return toPBUser(model),nil
		}
	

	func (this *UserService) Find (ctx context.Context,req  *pb.UserPageQuery)(*pb.UserWithCount,error){
			
			models,count, err := this.dataIns.Find(ctx,req)
			if err != nil{
				return nil,err
			}
			output := make([]*pb.User,0,len(models))
			for _, m := range models{
				output = append(output,toPBUser(m))
			}
			ret := &pb.UserWithCount{
				Users:output,
			}
			if req.PageDataCount.GetValue(){
				ret.DataCount= wrapperspb.Int32(int32(count))
			}
			return ret,nil
		}
	

	func (this *UserService) Count (ctx context.Context,req  *pb.User)(*pb.CountNumber,error){
			value , err := this.dataIns.Count(ctx,req)
			if err != nil{
				return nil,err
			}
			return &pb.CountNumber{
				Value:value,
			},nil
		}
	

	
		func (this *UserService) AddCar (ctx context.Context,req  *pb.Car)(*pb.CarId,error){
			id, err := this.dataIns.AddCar(ctx,req)
			if err != nil{
				return nil,err
			}
			
			
					
					return &pb.CarId{
						CarId : id,
					},nil
		}
	

	
		func (this *UserService) AddCarById (ctx context.Context,req  *pb.UserIdAndCarId)(*emptypb.Empty,error){
			err :=  this.dataIns.AddCarById(ctx,req)
			if err != nil{
				if sqlgraph.IsForeignKeyConstraintError(err){
					return nil,err
				}
			}
			return &emptypb.Empty{},nil
		}
	

	
		func (this *UserService) RemoveCar (ctx context.Context,req  *pb.UserRemoveCarReq)(*emptypb.Empty,error){
			err :=  this.dataIns.RemoveCar(ctx,req)
			if err != nil{
				return nil,err
			}
			return &emptypb.Empty{},nil
		}
	

	
		func (this *UserService) FindCars (ctx context.Context,req *pb.UserFindCarsReq)(*pb.UserFindCarsRes,error){
			data,total,err := this.dataIns.FindCars(ctx,req)
			if err != nil{
				return nil,err
			}
			pbData := make([]*pb.Car,len(data))
			for i:=0;i<len(data);i++{
				pbData[i] =toPBCar(data[i])
			}
			return &pb.UserFindCarsRes{
				DataCount:int32(total),
				Cars:pbData,
			},nil
		}
	

	
		func (this *UserService) FindDepts (ctx context.Context,req *pb.UserFindDeptsReq)(*pb.UserFindDeptsRes,error){
			data,total,err := this.dataIns.FindDepts(ctx,req)
			if err != nil{
				return nil,err
			}
			pbData := make([]*pb.Dept,len(data))
			for i:=0;i<len(data);i++{
				pbData[i] =toPBDept(data[i])
			}
			return &pb.UserFindDeptsRes{
				DataCount:int32(total),
				Depts:pbData,
			},nil
		}
	


