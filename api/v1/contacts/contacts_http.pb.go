// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package contacts

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CarServiceHTTPServer interface {
	Count(context.Context, *Car) (*CountNumber, error)
	Create(context.Context, *Car) (*CarId, error)
	Delete(context.Context, *CarId) (*emptypb.Empty, error)
	Find(context.Context, *CarPageQuery) (*CarWithCount, error)
	FindById(context.Context, *CarId) (*Car, error)
	Update(context.Context, *Car) (*emptypb.Empty, error)
}

func RegisterCarServiceHTTPServer(s *http.Server, srv CarServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/cars", _CarService_Create0_HTTP_Handler(srv))
	r.PATCH("/cars/{car_id}", _CarService_Update0_HTTP_Handler(srv))
	r.DELETE("/cars/{car_id}", _CarService_Delete0_HTTP_Handler(srv))
	r.GET("/cars/{car_id}", _CarService_FindById0_HTTP_Handler(srv))
	r.GET("/cars", _CarService_Find0_HTTP_Handler(srv))
	r.GET("/cars/cars/count", _CarService_Count0_HTTP_Handler(srv))
}

func _CarService_Create0_HTTP_Handler(srv CarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Car
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.CarService/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*Car))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CarId)
		return ctx.Result(200, reply)
	}
}

func _CarService_Update0_HTTP_Handler(srv CarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Car
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.CarService/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*Car))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _CarService_Delete0_HTTP_Handler(srv CarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CarId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.CarService/Delete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*CarId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _CarService_FindById0_HTTP_Handler(srv CarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CarId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.CarService/FindById")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindById(ctx, req.(*CarId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Car)
		return ctx.Result(200, reply)
	}
}

func _CarService_Find0_HTTP_Handler(srv CarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CarPageQuery
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.CarService/Find")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Find(ctx, req.(*CarPageQuery))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CarWithCount)
		return ctx.Result(200, reply)
	}
}

func _CarService_Count0_HTTP_Handler(srv CarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Car
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.CarService/Count")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Count(ctx, req.(*Car))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CountNumber)
		return ctx.Result(200, reply)
	}
}

type CarServiceHTTPClient interface {
	Count(ctx context.Context, req *Car, opts ...http.CallOption) (rsp *CountNumber, err error)
	Create(ctx context.Context, req *Car, opts ...http.CallOption) (rsp *CarId, err error)
	Delete(ctx context.Context, req *CarId, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Find(ctx context.Context, req *CarPageQuery, opts ...http.CallOption) (rsp *CarWithCount, err error)
	FindById(ctx context.Context, req *CarId, opts ...http.CallOption) (rsp *Car, err error)
	Update(ctx context.Context, req *Car, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type CarServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCarServiceHTTPClient(client *http.Client) CarServiceHTTPClient {
	return &CarServiceHTTPClientImpl{client}
}

func (c *CarServiceHTTPClientImpl) Count(ctx context.Context, in *Car, opts ...http.CallOption) (*CountNumber, error) {
	var out CountNumber
	pattern := "/cars/cars/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.CarService/Count"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CarServiceHTTPClientImpl) Create(ctx context.Context, in *Car, opts ...http.CallOption) (*CarId, error) {
	var out CarId
	pattern := "/cars"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/contacts.CarService/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CarServiceHTTPClientImpl) Delete(ctx context.Context, in *CarId, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cars/{car_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.CarService/Delete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CarServiceHTTPClientImpl) Find(ctx context.Context, in *CarPageQuery, opts ...http.CallOption) (*CarWithCount, error) {
	var out CarWithCount
	pattern := "/cars"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.CarService/Find"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CarServiceHTTPClientImpl) FindById(ctx context.Context, in *CarId, opts ...http.CallOption) (*Car, error) {
	var out Car
	pattern := "/cars/{car_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.CarService/FindById"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CarServiceHTTPClientImpl) Update(ctx context.Context, in *Car, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/cars/{car_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/contacts.CarService/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type DeptServiceHTTPServer interface {
	AddUser(context.Context, *DeptAddUserReq) (*UserId, error)
	AddUserById(context.Context, *DeptIdAndUserId) (*emptypb.Empty, error)
	Count(context.Context, *Dept) (*CountNumber, error)
	Create(context.Context, *Dept) (*DeptId, error)
	Delete(context.Context, *DeptId) (*emptypb.Empty, error)
	Find(context.Context, *DeptPageQuery) (*DeptWithCount, error)
	FindById(context.Context, *DeptId) (*Dept, error)
	FindUsers(context.Context, *DeptFindUsersReq) (*DeptFindUsersRes, error)
	RemoveUser(context.Context, *DeptRemoveUserReq) (*emptypb.Empty, error)
	Update(context.Context, *Dept) (*emptypb.Empty, error)
}

func RegisterDeptServiceHTTPServer(s *http.Server, srv DeptServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/depts", _DeptService_Create1_HTTP_Handler(srv))
	r.PATCH("/depts/{dept_id}", _DeptService_Update1_HTTP_Handler(srv))
	r.DELETE("/depts/{dept_id}", _DeptService_Delete1_HTTP_Handler(srv))
	r.GET("/depts/{dept_id}", _DeptService_FindById1_HTTP_Handler(srv))
	r.GET("/depts", _DeptService_Find1_HTTP_Handler(srv))
	r.GET("/depts/depts/count", _DeptService_Count1_HTTP_Handler(srv))
	r.POST("/depts/{dept_id}/users", _DeptService_AddUser0_HTTP_Handler(srv))
	r.POST("/depts/{dept_id}/users/{user_id}", _DeptService_AddUserById0_HTTP_Handler(srv))
	r.DELETE("/depts/{dept_id}/users", _DeptService_RemoveUser0_HTTP_Handler(srv))
	r.GET("/depts/{dept_id}/users", _DeptService_FindUsers0_HTTP_Handler(srv))
}

func _DeptService_Create1_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Dept
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*Dept))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptId)
		return ctx.Result(200, reply)
	}
}

func _DeptService_Update1_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Dept
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*Dept))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DeptService_Delete1_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/Delete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*DeptId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DeptService_FindById1_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/FindById")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindById(ctx, req.(*DeptId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Dept)
		return ctx.Result(200, reply)
	}
}

func _DeptService_Find1_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptPageQuery
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/Find")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Find(ctx, req.(*DeptPageQuery))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptWithCount)
		return ctx.Result(200, reply)
	}
}

func _DeptService_Count1_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Dept
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/Count")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Count(ctx, req.(*Dept))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CountNumber)
		return ctx.Result(200, reply)
	}
}

func _DeptService_AddUser0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptAddUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/AddUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUser(ctx, req.(*DeptAddUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserId)
		return ctx.Result(200, reply)
	}
}

func _DeptService_AddUserById0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptIdAndUserId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/AddUserById")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserById(ctx, req.(*DeptIdAndUserId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DeptService_RemoveUser0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptRemoveUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/RemoveUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveUser(ctx, req.(*DeptRemoveUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _DeptService_FindUsers0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeptFindUsersReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.DeptService/FindUsers")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindUsers(ctx, req.(*DeptFindUsersReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptFindUsersRes)
		return ctx.Result(200, reply)
	}
}

type DeptServiceHTTPClient interface {
	AddUser(ctx context.Context, req *DeptAddUserReq, opts ...http.CallOption) (rsp *UserId, err error)
	AddUserById(ctx context.Context, req *DeptIdAndUserId, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Count(ctx context.Context, req *Dept, opts ...http.CallOption) (rsp *CountNumber, err error)
	Create(ctx context.Context, req *Dept, opts ...http.CallOption) (rsp *DeptId, err error)
	Delete(ctx context.Context, req *DeptId, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Find(ctx context.Context, req *DeptPageQuery, opts ...http.CallOption) (rsp *DeptWithCount, err error)
	FindById(ctx context.Context, req *DeptId, opts ...http.CallOption) (rsp *Dept, err error)
	FindUsers(ctx context.Context, req *DeptFindUsersReq, opts ...http.CallOption) (rsp *DeptFindUsersRes, err error)
	RemoveUser(ctx context.Context, req *DeptRemoveUserReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Update(ctx context.Context, req *Dept, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type DeptServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDeptServiceHTTPClient(client *http.Client) DeptServiceHTTPClient {
	return &DeptServiceHTTPClientImpl{client}
}

func (c *DeptServiceHTTPClientImpl) AddUser(ctx context.Context, in *DeptAddUserReq, opts ...http.CallOption) (*UserId, error) {
	var out UserId
	pattern := "/depts/{dept_id}/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/contacts.DeptService/AddUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) AddUserById(ctx context.Context, in *DeptIdAndUserId, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/depts/{dept_id}/users/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.DeptService/AddUserById"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) Count(ctx context.Context, in *Dept, opts ...http.CallOption) (*CountNumber, error) {
	var out CountNumber
	pattern := "/depts/depts/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.DeptService/Count"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) Create(ctx context.Context, in *Dept, opts ...http.CallOption) (*DeptId, error) {
	var out DeptId
	pattern := "/depts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/contacts.DeptService/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) Delete(ctx context.Context, in *DeptId, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/depts/{dept_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.DeptService/Delete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) Find(ctx context.Context, in *DeptPageQuery, opts ...http.CallOption) (*DeptWithCount, error) {
	var out DeptWithCount
	pattern := "/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.DeptService/Find"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) FindById(ctx context.Context, in *DeptId, opts ...http.CallOption) (*Dept, error) {
	var out Dept
	pattern := "/depts/{dept_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.DeptService/FindById"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) FindUsers(ctx context.Context, in *DeptFindUsersReq, opts ...http.CallOption) (*DeptFindUsersRes, error) {
	var out DeptFindUsersRes
	pattern := "/depts/{dept_id}/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.DeptService/FindUsers"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) RemoveUser(ctx context.Context, in *DeptRemoveUserReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/depts/{dept_id}/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.DeptService/RemoveUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) Update(ctx context.Context, in *Dept, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/depts/{dept_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/contacts.DeptService/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type UserServiceHTTPServer interface {
	AddCar(context.Context, *Car) (*CarId, error)
	AddCarById(context.Context, *UserIdAndCarId) (*emptypb.Empty, error)
	Count(context.Context, *User) (*CountNumber, error)
	Create(context.Context, *User) (*UserId, error)
	Delete(context.Context, *UserId) (*emptypb.Empty, error)
	Find(context.Context, *UserPageQuery) (*UserWithCount, error)
	FindById(context.Context, *UserId) (*User, error)
	FindCars(context.Context, *UserFindCarsReq) (*UserFindCarsRes, error)
	FindDepts(context.Context, *UserFindDeptsReq) (*UserFindDeptsRes, error)
	RemoveCar(context.Context, *UserRemoveCarReq) (*emptypb.Empty, error)
	Update(context.Context, *User) (*emptypb.Empty, error)
}

func RegisterUserServiceHTTPServer(s *http.Server, srv UserServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/users", _UserService_Create2_HTTP_Handler(srv))
	r.PATCH("/users/{user_id}", _UserService_Update2_HTTP_Handler(srv))
	r.DELETE("/users/{user_id}", _UserService_Delete2_HTTP_Handler(srv))
	r.GET("/users/{user_id}", _UserService_FindById2_HTTP_Handler(srv))
	r.GET("/users", _UserService_Find2_HTTP_Handler(srv))
	r.GET("/users/users/count", _UserService_Count2_HTTP_Handler(srv))
	r.POST("/users/{user_id}/cars", _UserService_AddCar0_HTTP_Handler(srv))
	r.POST("/users/{user_id}/cars/{car_id}", _UserService_AddCarById0_HTTP_Handler(srv))
	r.DELETE("/users/{user_id}/cars", _UserService_RemoveCar0_HTTP_Handler(srv))
	r.GET("/users/{user_id}/cars", _UserService_FindCars0_HTTP_Handler(srv))
	r.GET("/users/{user_id}/depts", _UserService_FindDepts0_HTTP_Handler(srv))
}

func _UserService_Create2_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in User
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*User))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserId)
		return ctx.Result(200, reply)
	}
}

func _UserService_Update2_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in User
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*User))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserService_Delete2_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/Delete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*UserId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserService_FindById2_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/FindById")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindById(ctx, req.(*UserId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _UserService_Find2_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserPageQuery
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/Find")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Find(ctx, req.(*UserPageQuery))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserWithCount)
		return ctx.Result(200, reply)
	}
}

func _UserService_Count2_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in User
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/Count")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Count(ctx, req.(*User))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CountNumber)
		return ctx.Result(200, reply)
	}
}

func _UserService_AddCar0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Car
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/AddCar")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddCar(ctx, req.(*Car))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CarId)
		return ctx.Result(200, reply)
	}
}

func _UserService_AddCarById0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserIdAndCarId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/AddCarById")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddCarById(ctx, req.(*UserIdAndCarId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserService_RemoveCar0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRemoveCarReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/RemoveCar")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveCar(ctx, req.(*UserRemoveCarReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserService_FindCars0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserFindCarsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/FindCars")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindCars(ctx, req.(*UserFindCarsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserFindCarsRes)
		return ctx.Result(200, reply)
	}
}

func _UserService_FindDepts0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserFindDeptsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/contacts.UserService/FindDepts")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindDepts(ctx, req.(*UserFindDeptsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserFindDeptsRes)
		return ctx.Result(200, reply)
	}
}

type UserServiceHTTPClient interface {
	AddCar(ctx context.Context, req *Car, opts ...http.CallOption) (rsp *CarId, err error)
	AddCarById(ctx context.Context, req *UserIdAndCarId, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Count(ctx context.Context, req *User, opts ...http.CallOption) (rsp *CountNumber, err error)
	Create(ctx context.Context, req *User, opts ...http.CallOption) (rsp *UserId, err error)
	Delete(ctx context.Context, req *UserId, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Find(ctx context.Context, req *UserPageQuery, opts ...http.CallOption) (rsp *UserWithCount, err error)
	FindById(ctx context.Context, req *UserId, opts ...http.CallOption) (rsp *User, err error)
	FindCars(ctx context.Context, req *UserFindCarsReq, opts ...http.CallOption) (rsp *UserFindCarsRes, err error)
	FindDepts(ctx context.Context, req *UserFindDeptsReq, opts ...http.CallOption) (rsp *UserFindDeptsRes, err error)
	RemoveCar(ctx context.Context, req *UserRemoveCarReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Update(ctx context.Context, req *User, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type UserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserServiceHTTPClient(client *http.Client) UserServiceHTTPClient {
	return &UserServiceHTTPClientImpl{client}
}

func (c *UserServiceHTTPClientImpl) AddCar(ctx context.Context, in *Car, opts ...http.CallOption) (*CarId, error) {
	var out CarId
	pattern := "/users/{user_id}/cars"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/contacts.UserService/AddCar"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) AddCarById(ctx context.Context, in *UserIdAndCarId, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/users/{user_id}/cars/{car_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.UserService/AddCarById"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) Count(ctx context.Context, in *User, opts ...http.CallOption) (*CountNumber, error) {
	var out CountNumber
	pattern := "/users/users/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.UserService/Count"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) Create(ctx context.Context, in *User, opts ...http.CallOption) (*UserId, error) {
	var out UserId
	pattern := "/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/contacts.UserService/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) Delete(ctx context.Context, in *UserId, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/users/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.UserService/Delete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) Find(ctx context.Context, in *UserPageQuery, opts ...http.CallOption) (*UserWithCount, error) {
	var out UserWithCount
	pattern := "/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.UserService/Find"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) FindById(ctx context.Context, in *UserId, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/users/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.UserService/FindById"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) FindCars(ctx context.Context, in *UserFindCarsReq, opts ...http.CallOption) (*UserFindCarsRes, error) {
	var out UserFindCarsRes
	pattern := "/users/{user_id}/cars"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.UserService/FindCars"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) FindDepts(ctx context.Context, in *UserFindDeptsReq, opts ...http.CallOption) (*UserFindDeptsRes, error) {
	var out UserFindDeptsRes
	pattern := "/users/{user_id}/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.UserService/FindDepts"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) RemoveCar(ctx context.Context, in *UserRemoveCarReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/users/{user_id}/cars"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/contacts.UserService/RemoveCar"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserServiceHTTPClientImpl) Update(ctx context.Context, in *User, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/users/{user_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/contacts.UserService/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
