// Code generated by entproto. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: api/v1/contacts/contacts.proto

package contacts

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User_Race int32

const (
	User_RACE_UNSPECIFIED User_Race = 0
	User_YELLOW           User_Race = 1
	User_WHITE            User_Race = 2
	User_BLACK            User_Race = 3
)

// Enum value maps for User_Race.
var (
	User_Race_name = map[int32]string{
		0: "RACE_UNSPECIFIED",
		1: "YELLOW",
		2: "WHITE",
		3: "BLACK",
	}
	User_Race_value = map[string]int32{
		"RACE_UNSPECIFIED": 0,
		"YELLOW":           1,
		"WHITE":            2,
		"BLACK":            3,
	}
)

func (x User_Race) Enum() *User_Race {
	p := new(User_Race)
	*p = x
	return p
}

func (x User_Race) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_Race) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_contacts_contacts_proto_enumTypes[0].Descriptor()
}

func (User_Race) Type() protoreflect.EnumType {
	return &file_api_v1_contacts_contacts_proto_enumTypes[0]
}

func (x User_Race) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_Race.Descriptor instead.
func (User_Race) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{2, 0}
}

type DeptAddUserReq_Race int32

const (
	DeptAddUserReq_RACE_UNSPECIFIED DeptAddUserReq_Race = 0
	DeptAddUserReq_YELLOW           DeptAddUserReq_Race = 1
	DeptAddUserReq_WHITE            DeptAddUserReq_Race = 2
	DeptAddUserReq_BLACK            DeptAddUserReq_Race = 3
)

// Enum value maps for DeptAddUserReq_Race.
var (
	DeptAddUserReq_Race_name = map[int32]string{
		0: "RACE_UNSPECIFIED",
		1: "YELLOW",
		2: "WHITE",
		3: "BLACK",
	}
	DeptAddUserReq_Race_value = map[string]int32{
		"RACE_UNSPECIFIED": 0,
		"YELLOW":           1,
		"WHITE":            2,
		"BLACK":            3,
	}
)

func (x DeptAddUserReq_Race) Enum() *DeptAddUserReq_Race {
	p := new(DeptAddUserReq_Race)
	*p = x
	return p
}

func (x DeptAddUserReq_Race) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeptAddUserReq_Race) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_contacts_contacts_proto_enumTypes[1].Descriptor()
}

func (DeptAddUserReq_Race) Type() protoreflect.EnumType {
	return &file_api_v1_contacts_contacts_proto_enumTypes[1]
}

func (x DeptAddUserReq_Race) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeptAddUserReq_Race.Descriptor instead.
func (DeptAddUserReq_Race) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{14, 0}
}

type UserPageQuery_Race int32

const (
	UserPageQuery_RACE_UNSPECIFIED UserPageQuery_Race = 0
	UserPageQuery_YELLOW           UserPageQuery_Race = 1
	UserPageQuery_WHITE            UserPageQuery_Race = 2
	UserPageQuery_BLACK            UserPageQuery_Race = 3
)

// Enum value maps for UserPageQuery_Race.
var (
	UserPageQuery_Race_name = map[int32]string{
		0: "RACE_UNSPECIFIED",
		1: "YELLOW",
		2: "WHITE",
		3: "BLACK",
	}
	UserPageQuery_Race_value = map[string]int32{
		"RACE_UNSPECIFIED": 0,
		"YELLOW":           1,
		"WHITE":            2,
		"BLACK":            3,
	}
)

func (x UserPageQuery_Race) Enum() *UserPageQuery_Race {
	p := new(UserPageQuery_Race)
	*p = x
	return p
}

func (x UserPageQuery_Race) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPageQuery_Race) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_contacts_contacts_proto_enumTypes[2].Descriptor()
}

func (UserPageQuery_Race) Type() protoreflect.EnumType {
	return &file_api_v1_contacts_contacts_proto_enumTypes[2]
}

func (x UserPageQuery_Race) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPageQuery_Race.Descriptor instead.
func (UserPageQuery_Race) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{29, 0}
}

type Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarId  string                  `protobuf:"bytes,1,opt,name=car_id,proto3" json:"car_id,omitempty"`
	UserId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (x *Car) Reset() {
	*x = Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Car) ProtoMessage() {}

func (x *Car) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Car.ProtoReflect.Descriptor instead.
func (*Car) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{0}
}

func (x *Car) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

func (x *Car) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

type Dept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeptId string `protobuf:"bytes,1,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
}

func (x *Dept) Reset() {
	*x = Dept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dept) ProtoMessage() {}

func (x *Dept) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dept.ProtoReflect.Descriptor instead.
func (*Dept) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{1}
}

func (x *Dept) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string                  `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Phone  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Race   User_Race               `protobuf:"varint,3,opt,name=race,proto3,enum=contacts.User_Race" json:"race,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *User) GetRace() User_Race {
	if x != nil {
		return x.Race
	}
	return User_RACE_UNSPECIFIED
}

type CarId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarId string `protobuf:"bytes,1,opt,name=car_id,proto3" json:"car_id,omitempty"`
}

func (x *CarId) Reset() {
	*x = CarId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarId) ProtoMessage() {}

func (x *CarId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarId.ProtoReflect.Descriptor instead.
func (*CarId) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{3}
}

func (x *CarId) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

type DeptId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeptId string `protobuf:"bytes,1,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
}

func (x *DeptId) Reset() {
	*x = DeptId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptId) ProtoMessage() {}

func (x *DeptId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptId.ProtoReflect.Descriptor instead.
func (*DeptId) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{4}
}

func (x *DeptId) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

type UserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (x *UserId) Reset() {
	*x = UserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{5}
}

func (x *UserId) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CountNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CountNumber) Reset() {
	*x = CountNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountNumber) ProtoMessage() {}

func (x *CountNumber) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountNumber.ProtoReflect.Descriptor instead.
func (*CountNumber) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{6}
}

func (x *CountNumber) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Cars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataList []*Car `protobuf:"bytes,1,rep,name=data_list,proto3" json:"data_list,omitempty"`
}

func (x *Cars) Reset() {
	*x = Cars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cars) ProtoMessage() {}

func (x *Cars) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cars.ProtoReflect.Descriptor instead.
func (*Cars) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{7}
}

func (x *Cars) GetDataList() []*Car {
	if x != nil {
		return x.DataList
	}
	return nil
}

type CarWithCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCount *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=data_count,proto3" json:"data_count,omitempty"`
	Cars      []*Car                 `protobuf:"bytes,2,rep,name=Cars,proto3" json:"Cars,omitempty"`
}

func (x *CarWithCount) Reset() {
	*x = CarWithCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarWithCount) ProtoMessage() {}

func (x *CarWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarWithCount.ProtoReflect.Descriptor instead.
func (*CarWithCount) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{8}
}

func (x *CarWithCount) GetDataCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.DataCount
	}
	return nil
}

func (x *CarWithCount) GetCars() []*Car {
	if x != nil {
		return x.Cars
	}
	return nil
}

type CarIdAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarId  string `protobuf:"bytes,1,opt,name=car_id,proto3" json:"car_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (x *CarIdAndUserId) Reset() {
	*x = CarIdAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarIdAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarIdAndUserId) ProtoMessage() {}

func (x *CarIdAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarIdAndUserId.ProtoReflect.Descriptor instead.
func (*CarIdAndUserId) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{9}
}

func (x *CarIdAndUserId) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

func (x *CarIdAndUserId) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CarPageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarId         string                  `protobuf:"bytes,1,opt,name=car_id,proto3" json:"car_id,omitempty"`
	UserId        *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
	PageIndex     int32                   `protobuf:"varint,3,opt,name=page_index,proto3" json:"page_index,omitempty"`
	PageSize      int32                   `protobuf:"varint,4,opt,name=page_size,proto3" json:"page_size,omitempty"`
	PageDataCount *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=page_data_count,proto3" json:"page_data_count,omitempty"`
}

func (x *CarPageQuery) Reset() {
	*x = CarPageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarPageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarPageQuery) ProtoMessage() {}

func (x *CarPageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarPageQuery.ProtoReflect.Descriptor instead.
func (*CarPageQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{10}
}

func (x *CarPageQuery) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

func (x *CarPageQuery) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *CarPageQuery) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *CarPageQuery) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CarPageQuery) GetPageDataCount() *wrapperspb.BoolValue {
	if x != nil {
		return x.PageDataCount
	}
	return nil
}

type Depts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataList []*Dept `protobuf:"bytes,1,rep,name=data_list,proto3" json:"data_list,omitempty"`
}

func (x *Depts) Reset() {
	*x = Depts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Depts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Depts) ProtoMessage() {}

func (x *Depts) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Depts.ProtoReflect.Descriptor instead.
func (*Depts) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{11}
}

func (x *Depts) GetDataList() []*Dept {
	if x != nil {
		return x.DataList
	}
	return nil
}

type DeptWithCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCount *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=data_count,proto3" json:"data_count,omitempty"`
	Depts     []*Dept                `protobuf:"bytes,2,rep,name=Depts,proto3" json:"Depts,omitempty"`
}

func (x *DeptWithCount) Reset() {
	*x = DeptWithCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptWithCount) ProtoMessage() {}

func (x *DeptWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptWithCount.ProtoReflect.Descriptor instead.
func (*DeptWithCount) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{12}
}

func (x *DeptWithCount) GetDataCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.DataCount
	}
	return nil
}

func (x *DeptWithCount) GetDepts() []*Dept {
	if x != nil {
		return x.Depts
	}
	return nil
}

type DeptIdAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeptId string `protobuf:"bytes,1,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (x *DeptIdAndUserId) Reset() {
	*x = DeptIdAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptIdAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptIdAndUserId) ProtoMessage() {}

func (x *DeptIdAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptIdAndUserId.ProtoReflect.Descriptor instead.
func (*DeptIdAndUserId) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{13}
}

func (x *DeptIdAndUserId) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

func (x *DeptIdAndUserId) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeptAddUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string                  `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Phone  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Race   DeptAddUserReq_Race     `protobuf:"varint,3,opt,name=race,proto3,enum=contacts.DeptAddUserReq_Race" json:"race,omitempty"`
	DeptId string                  `protobuf:"bytes,4,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
}

func (x *DeptAddUserReq) Reset() {
	*x = DeptAddUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptAddUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptAddUserReq) ProtoMessage() {}

func (x *DeptAddUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptAddUserReq.ProtoReflect.Descriptor instead.
func (*DeptAddUserReq) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{14}
}

func (x *DeptAddUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeptAddUserReq) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *DeptAddUserReq) GetRace() DeptAddUserReq_Race {
	if x != nil {
		return x.Race
	}
	return DeptAddUserReq_RACE_UNSPECIFIED
}

func (x *DeptAddUserReq) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

type DeptRemoveUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string                  `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Phone     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	PageIndex int32                   `protobuf:"varint,3,opt,name=page_index,proto3" json:"page_index,omitempty"`
	PageSize  int32                   `protobuf:"varint,4,opt,name=page_size,proto3" json:"page_size,omitempty"`
	DeptId    string                  `protobuf:"bytes,5,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
}

func (x *DeptRemoveUserReq) Reset() {
	*x = DeptRemoveUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptRemoveUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptRemoveUserReq) ProtoMessage() {}

func (x *DeptRemoveUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptRemoveUserReq.ProtoReflect.Descriptor instead.
func (*DeptRemoveUserReq) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{15}
}

func (x *DeptRemoveUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeptRemoveUserReq) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *DeptRemoveUserReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *DeptRemoveUserReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DeptRemoveUserReq) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

type DeptFindUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string                  `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Phone     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	PageIndex int32                   `protobuf:"varint,3,opt,name=page_index,proto3" json:"page_index,omitempty"`
	PageSize  int32                   `protobuf:"varint,4,opt,name=page_size,proto3" json:"page_size,omitempty"`
	DeptId    string                  `protobuf:"bytes,5,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
}

func (x *DeptFindUsersReq) Reset() {
	*x = DeptFindUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptFindUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptFindUsersReq) ProtoMessage() {}

func (x *DeptFindUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptFindUsersReq.ProtoReflect.Descriptor instead.
func (*DeptFindUsersReq) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{16}
}

func (x *DeptFindUsersReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeptFindUsersReq) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *DeptFindUsersReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *DeptFindUsersReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DeptFindUsersReq) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

type DeptFindUsersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCount int32   `protobuf:"varint,1,opt,name=data_count,proto3" json:"data_count,omitempty"`
	Users     []*User `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
}

func (x *DeptFindUsersRes) Reset() {
	*x = DeptFindUsersRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptFindUsersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptFindUsersRes) ProtoMessage() {}

func (x *DeptFindUsersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptFindUsersRes.ProtoReflect.Descriptor instead.
func (*DeptFindUsersRes) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{17}
}

func (x *DeptFindUsersRes) GetDataCount() int32 {
	if x != nil {
		return x.DataCount
	}
	return 0
}

func (x *DeptFindUsersRes) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type DeptPageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeptId        string                `protobuf:"bytes,1,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
	PageIndex     int32                 `protobuf:"varint,2,opt,name=page_index,proto3" json:"page_index,omitempty"`
	PageSize      int32                 `protobuf:"varint,3,opt,name=page_size,proto3" json:"page_size,omitempty"`
	PageDataCount *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=page_data_count,proto3" json:"page_data_count,omitempty"`
}

func (x *DeptPageQuery) Reset() {
	*x = DeptPageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptPageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptPageQuery) ProtoMessage() {}

func (x *DeptPageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptPageQuery.ProtoReflect.Descriptor instead.
func (*DeptPageQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{18}
}

func (x *DeptPageQuery) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

func (x *DeptPageQuery) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *DeptPageQuery) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DeptPageQuery) GetPageDataCount() *wrapperspb.BoolValue {
	if x != nil {
		return x.PageDataCount
	}
	return nil
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataList []*User `protobuf:"bytes,1,rep,name=data_list,proto3" json:"data_list,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{19}
}

func (x *Users) GetDataList() []*User {
	if x != nil {
		return x.DataList
	}
	return nil
}

type UserWithCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCount *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=data_count,proto3" json:"data_count,omitempty"`
	Users     []*User                `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
}

func (x *UserWithCount) Reset() {
	*x = UserWithCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithCount) ProtoMessage() {}

func (x *UserWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithCount.ProtoReflect.Descriptor instead.
func (*UserWithCount) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{20}
}

func (x *UserWithCount) GetDataCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.DataCount
	}
	return nil
}

func (x *UserWithCount) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserIdAndCarId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
	CarId  string `protobuf:"bytes,2,opt,name=car_id,proto3" json:"car_id,omitempty"`
}

func (x *UserIdAndCarId) Reset() {
	*x = UserIdAndCarId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndCarId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndCarId) ProtoMessage() {}

func (x *UserIdAndCarId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndCarId.ProtoReflect.Descriptor instead.
func (*UserIdAndCarId) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{21}
}

func (x *UserIdAndCarId) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserIdAndCarId) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

type UserRemoveCarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarId     string `protobuf:"bytes,1,opt,name=car_id,proto3" json:"car_id,omitempty"`
	PageIndex int32  `protobuf:"varint,2,opt,name=page_index,proto3" json:"page_index,omitempty"`
	PageSize  int32  `protobuf:"varint,3,opt,name=page_size,proto3" json:"page_size,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (x *UserRemoveCarReq) Reset() {
	*x = UserRemoveCarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRemoveCarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRemoveCarReq) ProtoMessage() {}

func (x *UserRemoveCarReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRemoveCarReq.ProtoReflect.Descriptor instead.
func (*UserRemoveCarReq) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{22}
}

func (x *UserRemoveCarReq) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

func (x *UserRemoveCarReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *UserRemoveCarReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserRemoveCarReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserFindCarsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarId     string `protobuf:"bytes,1,opt,name=car_id,proto3" json:"car_id,omitempty"`
	PageIndex int32  `protobuf:"varint,2,opt,name=page_index,proto3" json:"page_index,omitempty"`
	PageSize  int32  `protobuf:"varint,3,opt,name=page_size,proto3" json:"page_size,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (x *UserFindCarsReq) Reset() {
	*x = UserFindCarsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFindCarsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFindCarsReq) ProtoMessage() {}

func (x *UserFindCarsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFindCarsReq.ProtoReflect.Descriptor instead.
func (*UserFindCarsReq) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{23}
}

func (x *UserFindCarsReq) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

func (x *UserFindCarsReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *UserFindCarsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserFindCarsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserFindCarsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCount int32  `protobuf:"varint,1,opt,name=data_count,proto3" json:"data_count,omitempty"`
	Cars      []*Car `protobuf:"bytes,2,rep,name=Cars,proto3" json:"Cars,omitempty"`
}

func (x *UserFindCarsRes) Reset() {
	*x = UserFindCarsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFindCarsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFindCarsRes) ProtoMessage() {}

func (x *UserFindCarsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFindCarsRes.ProtoReflect.Descriptor instead.
func (*UserFindCarsRes) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{24}
}

func (x *UserFindCarsRes) GetDataCount() int32 {
	if x != nil {
		return x.DataCount
	}
	return 0
}

func (x *UserFindCarsRes) GetCars() []*Car {
	if x != nil {
		return x.Cars
	}
	return nil
}

type UserIdAndDeptId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
	DeptId string `protobuf:"bytes,2,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
}

func (x *UserIdAndDeptId) Reset() {
	*x = UserIdAndDeptId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndDeptId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndDeptId) ProtoMessage() {}

func (x *UserIdAndDeptId) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndDeptId.ProtoReflect.Descriptor instead.
func (*UserIdAndDeptId) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{25}
}

func (x *UserIdAndDeptId) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserIdAndDeptId) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

type UserAddDeptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeptId string `protobuf:"bytes,1,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (x *UserAddDeptReq) Reset() {
	*x = UserAddDeptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAddDeptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAddDeptReq) ProtoMessage() {}

func (x *UserAddDeptReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAddDeptReq.ProtoReflect.Descriptor instead.
func (*UserAddDeptReq) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{26}
}

func (x *UserAddDeptReq) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

func (x *UserAddDeptReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserFindDeptsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeptId    string `protobuf:"bytes,1,opt,name=dept_id,proto3" json:"dept_id,omitempty"`
	PageIndex int32  `protobuf:"varint,2,opt,name=page_index,proto3" json:"page_index,omitempty"`
	PageSize  int32  `protobuf:"varint,3,opt,name=page_size,proto3" json:"page_size,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (x *UserFindDeptsReq) Reset() {
	*x = UserFindDeptsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFindDeptsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFindDeptsReq) ProtoMessage() {}

func (x *UserFindDeptsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFindDeptsReq.ProtoReflect.Descriptor instead.
func (*UserFindDeptsReq) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{27}
}

func (x *UserFindDeptsReq) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

func (x *UserFindDeptsReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *UserFindDeptsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserFindDeptsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserFindDeptsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCount int32   `protobuf:"varint,1,opt,name=data_count,proto3" json:"data_count,omitempty"`
	Depts     []*Dept `protobuf:"bytes,2,rep,name=Depts,proto3" json:"Depts,omitempty"`
}

func (x *UserFindDeptsRes) Reset() {
	*x = UserFindDeptsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFindDeptsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFindDeptsRes) ProtoMessage() {}

func (x *UserFindDeptsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFindDeptsRes.ProtoReflect.Descriptor instead.
func (*UserFindDeptsRes) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{28}
}

func (x *UserFindDeptsRes) GetDataCount() int32 {
	if x != nil {
		return x.DataCount
	}
	return 0
}

func (x *UserFindDeptsRes) GetDepts() []*Dept {
	if x != nil {
		return x.Depts
	}
	return nil
}

type UserPageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string                  `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Phone         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Race          UserPageQuery_Race      `protobuf:"varint,3,opt,name=race,proto3,enum=contacts.UserPageQuery_Race" json:"race,omitempty"`
	PageIndex     int32                   `protobuf:"varint,4,opt,name=page_index,proto3" json:"page_index,omitempty"`
	PageSize      int32                   `protobuf:"varint,5,opt,name=page_size,proto3" json:"page_size,omitempty"`
	PageDataCount *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=page_data_count,proto3" json:"page_data_count,omitempty"`
}

func (x *UserPageQuery) Reset() {
	*x = UserPageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_contacts_contacts_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPageQuery) ProtoMessage() {}

func (x *UserPageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_contacts_contacts_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPageQuery.ProtoReflect.Descriptor instead.
func (*UserPageQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_contacts_contacts_proto_rawDescGZIP(), []int{29}
}

func (x *UserPageQuery) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPageQuery) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *UserPageQuery) GetRace() UserPageQuery_Race {
	if x != nil {
		return x.Race
	}
	return UserPageQuery_RACE_UNSPECIFIED
}

func (x *UserPageQuery) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *UserPageQuery) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserPageQuery) GetPageDataCount() *wrapperspb.BoolValue {
	if x != nil {
		return x.PageDataCount
	}
	return nil
}

var File_api_v1_contacts_contacts_proto protoreflect.FileDescriptor

var file_api_v1_contacts_contacts_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x04,
	0x44, 0x65, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xcd,
	0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x22, 0x3e,
	0x0a, 0x04, 0x52, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x48, 0x49, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x22, 0x1f,
	0x0a, 0x05, 0x43, 0x61, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0x22, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x04,
	0x43, 0x61, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x6e, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x43, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x04, 0x43, 0x61, 0x72,
	0x73, 0x22, 0x42, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x05, 0x44, 0x65,
	0x70, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x72, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x44, 0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x52, 0x05,
	0x44, 0x65, 0x70, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xfb, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x70, 0x74, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b,
	0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x04, 0x52, 0x61,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x44,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89,
	0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x74, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5,
	0x8f, 0xb7, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0x58, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0d,
	0x44, 0x65, 0x70, 0x74, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x05, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x72, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0x81, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x72, 0x52, 0x04, 0x43, 0x61, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64,
	0x22, 0x44, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x70, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x58, 0x0a,
	0x10, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x44, 0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x74,
	0x52, 0x05, 0x44, 0x65, 0x70, 0x74, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x61, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a,
	0x04, 0x52, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x59,
	0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x48, 0x49, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x32, 0x8c, 0x04,
	0x0a, 0x0a, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x72, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x49, 0x64, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x22, 0x05,
	0x2f, 0x63, 0x61, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0c, 0x12, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x43, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x32, 0x0e, 0x2f, 0x63, 0x61, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0c, 0x12, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x43,
	0x61, 0x72, 0x12, 0x58, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x49, 0x64, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f,
	0x63, 0x61, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x0c,
	0x12, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x43, 0x61, 0x72, 0x12, 0x53, 0x0a, 0x08,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x63, 0x61, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x92, 0x41, 0x0e, 0x12, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x20, 0x43, 0x61,
	0x72, 0x12, 0x52, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x07, 0x12, 0x05, 0x2f, 0x63, 0x61, 0x72, 0x73, 0x92, 0x41, 0x0a, 0x12, 0x08, 0x46, 0x69, 0x6e,
	0x64, 0x20, 0x43, 0x61, 0x72, 0x12, 0x55, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x1a, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x63,
	0x61, 0x72, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x92, 0x41,
	0x0b, 0x12, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x43, 0x61, 0x72, 0x32, 0x9f, 0x08, 0x0a,
	0x0b, 0x44, 0x65, 0x70, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b,
	0x22, 0x06, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0d, 0x12, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x44, 0x65, 0x70, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x70, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x32, 0x10, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x64,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0d, 0x12, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x44, 0x65, 0x70, 0x74, 0x12, 0x5c, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b,
	0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x0d, 0x12, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x44, 0x65, 0x70, 0x74, 0x12, 0x58, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10,
	0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x92, 0x41, 0x0f, 0x12, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x20, 0x44, 0x65,
	0x70, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x70, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x92, 0x41, 0x0b, 0x12,
	0x09, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x44, 0x65, 0x70, 0x74, 0x12, 0x59, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x70, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x92, 0x41, 0x0c, 0x12, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x44, 0x65, 0x70, 0x74, 0x12, 0x6d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x74,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x12, 0x12, 0x10, 0x41, 0x64, 0x64, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x44, 0x65, 0x70, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x74, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22,
	0x20, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x92, 0x41, 0x18, 0x12, 0x16, 0x41, 0x64, 0x64, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x44, 0x65, 0x70, 0x74, 0x20, 0x62, 0x79, 0x20, 0x69, 0x64, 0x12, 0x81, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x92, 0x41, 0x1d, 0x12, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x44, 0x65, 0x70, 0x74, 0x20, 0x62, 0x79, 0x20, 0x69, 0x64,
	0x12, 0x7c, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x64, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x92, 0x41, 0x16, 0x12, 0x14, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x44, 0x65, 0x70, 0x74, 0x32, 0xff,
	0x08, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x22, 0x06, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0d,
	0x12, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5d, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x32, 0x10, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0d, 0x12,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x0d, 0x12, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x55, 0x73, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x08, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x12, 0x10, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x92, 0x41, 0x0f, 0x12, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x20,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x92, 0x41,
	0x0b, 0x12, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x55, 0x73, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x92, 0x41, 0x0c, 0x12, 0x0a, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x43, 0x61,
	0x72, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x49,
	0x64, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x11, 0x12, 0x0f, 0x41, 0x64, 0x64, 0x20, 0x43, 0x61, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x55, 0x73, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x49, 0x64,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x92, 0x41, 0x17, 0x12, 0x15, 0x41, 0x64, 0x64, 0x20, 0x43, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x69, 0x64, 0x12, 0x7d, 0x0a, 0x09, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x72, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x73, 0x92, 0x41, 0x1c, 0x12, 0x1a, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x43, 0x61, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x55,
	0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x69, 0x64, 0x12, 0x77, 0x0a, 0x08, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x73, 0x92, 0x41, 0x15, 0x12, 0x13, 0x47,
	0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x61, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x7c, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x73, 0x12,
	0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x44,
	0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x73, 0x92, 0x41, 0x16, 0x12, 0x14, 0x47, 0x65, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x44, 0x65, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x69, 0x67, 0x66, 0x61, 0x6c, 0x6c, 0x2f, 0x63, 0x75, 0x72, 0x64, 0x62, 0x6f, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_v1_contacts_contacts_proto_rawDescOnce sync.Once
	file_api_v1_contacts_contacts_proto_rawDescData = file_api_v1_contacts_contacts_proto_rawDesc
)

func file_api_v1_contacts_contacts_proto_rawDescGZIP() []byte {
	file_api_v1_contacts_contacts_proto_rawDescOnce.Do(func() {
		file_api_v1_contacts_contacts_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_contacts_contacts_proto_rawDescData)
	})
	return file_api_v1_contacts_contacts_proto_rawDescData
}

var file_api_v1_contacts_contacts_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_v1_contacts_contacts_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_v1_contacts_contacts_proto_goTypes = []interface{}{
	(User_Race)(0),                 // 0: contacts.User.Race
	(DeptAddUserReq_Race)(0),       // 1: contacts.DeptAddUserReq.Race
	(UserPageQuery_Race)(0),        // 2: contacts.UserPageQuery.Race
	(*Car)(nil),                    // 3: contacts.Car
	(*Dept)(nil),                   // 4: contacts.Dept
	(*User)(nil),                   // 5: contacts.User
	(*CarId)(nil),                  // 6: contacts.CarId
	(*DeptId)(nil),                 // 7: contacts.DeptId
	(*UserId)(nil),                 // 8: contacts.UserId
	(*CountNumber)(nil),            // 9: contacts.CountNumber
	(*Cars)(nil),                   // 10: contacts.Cars
	(*CarWithCount)(nil),           // 11: contacts.CarWithCount
	(*CarIdAndUserId)(nil),         // 12: contacts.CarIdAndUserId
	(*CarPageQuery)(nil),           // 13: contacts.CarPageQuery
	(*Depts)(nil),                  // 14: contacts.Depts
	(*DeptWithCount)(nil),          // 15: contacts.DeptWithCount
	(*DeptIdAndUserId)(nil),        // 16: contacts.DeptIdAndUserId
	(*DeptAddUserReq)(nil),         // 17: contacts.DeptAddUserReq
	(*DeptRemoveUserReq)(nil),      // 18: contacts.DeptRemoveUserReq
	(*DeptFindUsersReq)(nil),       // 19: contacts.DeptFindUsersReq
	(*DeptFindUsersRes)(nil),       // 20: contacts.DeptFindUsersRes
	(*DeptPageQuery)(nil),          // 21: contacts.DeptPageQuery
	(*Users)(nil),                  // 22: contacts.Users
	(*UserWithCount)(nil),          // 23: contacts.UserWithCount
	(*UserIdAndCarId)(nil),         // 24: contacts.UserIdAndCarId
	(*UserRemoveCarReq)(nil),       // 25: contacts.UserRemoveCarReq
	(*UserFindCarsReq)(nil),        // 26: contacts.UserFindCarsReq
	(*UserFindCarsRes)(nil),        // 27: contacts.UserFindCarsRes
	(*UserIdAndDeptId)(nil),        // 28: contacts.UserIdAndDeptId
	(*UserAddDeptReq)(nil),         // 29: contacts.UserAddDeptReq
	(*UserFindDeptsReq)(nil),       // 30: contacts.UserFindDeptsReq
	(*UserFindDeptsRes)(nil),       // 31: contacts.UserFindDeptsRes
	(*UserPageQuery)(nil),          // 32: contacts.UserPageQuery
	(*wrapperspb.StringValue)(nil), // 33: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),  // 34: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),   // 35: google.protobuf.BoolValue
	(*emptypb.Empty)(nil),          // 36: google.protobuf.Empty
}
var file_api_v1_contacts_contacts_proto_depIdxs = []int32{
	33, // 0: contacts.Car.user_id:type_name -> google.protobuf.StringValue
	33, // 1: contacts.User.phone:type_name -> google.protobuf.StringValue
	0,  // 2: contacts.User.race:type_name -> contacts.User.Race
	3,  // 3: contacts.Cars.data_list:type_name -> contacts.Car
	34, // 4: contacts.CarWithCount.data_count:type_name -> google.protobuf.Int32Value
	3,  // 5: contacts.CarWithCount.Cars:type_name -> contacts.Car
	33, // 6: contacts.CarPageQuery.user_id:type_name -> google.protobuf.StringValue
	35, // 7: contacts.CarPageQuery.page_data_count:type_name -> google.protobuf.BoolValue
	4,  // 8: contacts.Depts.data_list:type_name -> contacts.Dept
	34, // 9: contacts.DeptWithCount.data_count:type_name -> google.protobuf.Int32Value
	4,  // 10: contacts.DeptWithCount.Depts:type_name -> contacts.Dept
	33, // 11: contacts.DeptAddUserReq.phone:type_name -> google.protobuf.StringValue
	1,  // 12: contacts.DeptAddUserReq.race:type_name -> contacts.DeptAddUserReq.Race
	33, // 13: contacts.DeptRemoveUserReq.phone:type_name -> google.protobuf.StringValue
	33, // 14: contacts.DeptFindUsersReq.phone:type_name -> google.protobuf.StringValue
	5,  // 15: contacts.DeptFindUsersRes.Users:type_name -> contacts.User
	35, // 16: contacts.DeptPageQuery.page_data_count:type_name -> google.protobuf.BoolValue
	5,  // 17: contacts.Users.data_list:type_name -> contacts.User
	34, // 18: contacts.UserWithCount.data_count:type_name -> google.protobuf.Int32Value
	5,  // 19: contacts.UserWithCount.Users:type_name -> contacts.User
	3,  // 20: contacts.UserFindCarsRes.Cars:type_name -> contacts.Car
	4,  // 21: contacts.UserFindDeptsRes.Depts:type_name -> contacts.Dept
	33, // 22: contacts.UserPageQuery.phone:type_name -> google.protobuf.StringValue
	2,  // 23: contacts.UserPageQuery.race:type_name -> contacts.UserPageQuery.Race
	35, // 24: contacts.UserPageQuery.page_data_count:type_name -> google.protobuf.BoolValue
	3,  // 25: contacts.CarService.Create:input_type -> contacts.Car
	3,  // 26: contacts.CarService.Update:input_type -> contacts.Car
	6,  // 27: contacts.CarService.Delete:input_type -> contacts.CarId
	6,  // 28: contacts.CarService.FindById:input_type -> contacts.CarId
	13, // 29: contacts.CarService.Find:input_type -> contacts.CarPageQuery
	3,  // 30: contacts.CarService.Count:input_type -> contacts.Car
	4,  // 31: contacts.DeptService.Create:input_type -> contacts.Dept
	4,  // 32: contacts.DeptService.Update:input_type -> contacts.Dept
	7,  // 33: contacts.DeptService.Delete:input_type -> contacts.DeptId
	7,  // 34: contacts.DeptService.FindById:input_type -> contacts.DeptId
	21, // 35: contacts.DeptService.Find:input_type -> contacts.DeptPageQuery
	4,  // 36: contacts.DeptService.Count:input_type -> contacts.Dept
	17, // 37: contacts.DeptService.AddUser:input_type -> contacts.DeptAddUserReq
	16, // 38: contacts.DeptService.AddUserById:input_type -> contacts.DeptIdAndUserId
	18, // 39: contacts.DeptService.RemoveUser:input_type -> contacts.DeptRemoveUserReq
	19, // 40: contacts.DeptService.FindUsers:input_type -> contacts.DeptFindUsersReq
	5,  // 41: contacts.UserService.Create:input_type -> contacts.User
	5,  // 42: contacts.UserService.Update:input_type -> contacts.User
	8,  // 43: contacts.UserService.Delete:input_type -> contacts.UserId
	8,  // 44: contacts.UserService.FindById:input_type -> contacts.UserId
	32, // 45: contacts.UserService.Find:input_type -> contacts.UserPageQuery
	5,  // 46: contacts.UserService.Count:input_type -> contacts.User
	3,  // 47: contacts.UserService.AddCar:input_type -> contacts.Car
	24, // 48: contacts.UserService.AddCarById:input_type -> contacts.UserIdAndCarId
	25, // 49: contacts.UserService.RemoveCar:input_type -> contacts.UserRemoveCarReq
	26, // 50: contacts.UserService.FindCars:input_type -> contacts.UserFindCarsReq
	30, // 51: contacts.UserService.FindDepts:input_type -> contacts.UserFindDeptsReq
	6,  // 52: contacts.CarService.Create:output_type -> contacts.CarId
	36, // 53: contacts.CarService.Update:output_type -> google.protobuf.Empty
	36, // 54: contacts.CarService.Delete:output_type -> google.protobuf.Empty
	3,  // 55: contacts.CarService.FindById:output_type -> contacts.Car
	11, // 56: contacts.CarService.Find:output_type -> contacts.CarWithCount
	9,  // 57: contacts.CarService.Count:output_type -> contacts.CountNumber
	7,  // 58: contacts.DeptService.Create:output_type -> contacts.DeptId
	36, // 59: contacts.DeptService.Update:output_type -> google.protobuf.Empty
	36, // 60: contacts.DeptService.Delete:output_type -> google.protobuf.Empty
	4,  // 61: contacts.DeptService.FindById:output_type -> contacts.Dept
	15, // 62: contacts.DeptService.Find:output_type -> contacts.DeptWithCount
	9,  // 63: contacts.DeptService.Count:output_type -> contacts.CountNumber
	8,  // 64: contacts.DeptService.AddUser:output_type -> contacts.UserId
	36, // 65: contacts.DeptService.AddUserById:output_type -> google.protobuf.Empty
	36, // 66: contacts.DeptService.RemoveUser:output_type -> google.protobuf.Empty
	20, // 67: contacts.DeptService.FindUsers:output_type -> contacts.DeptFindUsersRes
	8,  // 68: contacts.UserService.Create:output_type -> contacts.UserId
	36, // 69: contacts.UserService.Update:output_type -> google.protobuf.Empty
	36, // 70: contacts.UserService.Delete:output_type -> google.protobuf.Empty
	5,  // 71: contacts.UserService.FindById:output_type -> contacts.User
	23, // 72: contacts.UserService.Find:output_type -> contacts.UserWithCount
	9,  // 73: contacts.UserService.Count:output_type -> contacts.CountNumber
	6,  // 74: contacts.UserService.AddCar:output_type -> contacts.CarId
	36, // 75: contacts.UserService.AddCarById:output_type -> google.protobuf.Empty
	36, // 76: contacts.UserService.RemoveCar:output_type -> google.protobuf.Empty
	27, // 77: contacts.UserService.FindCars:output_type -> contacts.UserFindCarsRes
	31, // 78: contacts.UserService.FindDepts:output_type -> contacts.UserFindDeptsRes
	52, // [52:79] is the sub-list for method output_type
	25, // [25:52] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_api_v1_contacts_contacts_proto_init() }
func file_api_v1_contacts_contacts_proto_init() {
	if File_api_v1_contacts_contacts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_contacts_contacts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarWithCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarIdAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarPageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Depts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptWithCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptIdAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptAddUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptRemoveUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptFindUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptFindUsersRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptPageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndCarId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRemoveCarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFindCarsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFindCarsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndDeptId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAddDeptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFindDeptsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFindDeptsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_contacts_contacts_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_contacts_contacts_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_api_v1_contacts_contacts_proto_goTypes,
		DependencyIndexes: file_api_v1_contacts_contacts_proto_depIdxs,
		EnumInfos:         file_api_v1_contacts_contacts_proto_enumTypes,
		MessageInfos:      file_api_v1_contacts_contacts_proto_msgTypes,
	}.Build()
	File_api_v1_contacts_contacts_proto = out.File
	file_api_v1_contacts_contacts_proto_rawDesc = nil
	file_api_v1_contacts_contacts_proto_goTypes = nil
	file_api_v1_contacts_contacts_proto_depIdxs = nil
}
