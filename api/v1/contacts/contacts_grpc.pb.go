// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	Create(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarId, error)
	Update(ctx context.Context, in *Car, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindById(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*Car, error)
	Find(ctx context.Context, in *CarPageQuery, opts ...grpc.CallOption) (*CarWithCount, error)
	Count(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CountNumber, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) Create(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarId, error) {
	out := new(CarId)
	err := c.cc.Invoke(ctx, "/contacts.CarService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) Update(ctx context.Context, in *Car, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.CarService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) Delete(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.CarService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) FindById(ctx context.Context, in *CarId, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/contacts.CarService/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) Find(ctx context.Context, in *CarPageQuery, opts ...grpc.CallOption) (*CarWithCount, error) {
	out := new(CarWithCount)
	err := c.cc.Invoke(ctx, "/contacts.CarService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) Count(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CountNumber, error) {
	out := new(CountNumber)
	err := c.cc.Invoke(ctx, "/contacts.CarService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations must embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	Create(context.Context, *Car) (*CarId, error)
	Update(context.Context, *Car) (*emptypb.Empty, error)
	Delete(context.Context, *CarId) (*emptypb.Empty, error)
	FindById(context.Context, *CarId) (*Car, error)
	Find(context.Context, *CarPageQuery) (*CarWithCount, error)
	Count(context.Context, *Car) (*CountNumber, error)
	mustEmbedUnimplementedCarServiceServer()
}

// UnimplementedCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) Create(context.Context, *Car) (*CarId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCarServiceServer) Update(context.Context, *Car) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCarServiceServer) Delete(context.Context, *CarId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCarServiceServer) FindById(context.Context, *CarId) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedCarServiceServer) Find(context.Context, *CarPageQuery) (*CarWithCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedCarServiceServer) Count(context.Context, *Car) (*CountNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedCarServiceServer) mustEmbedUnimplementedCarServiceServer() {}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.CarService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Create(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.CarService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Update(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.CarService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Delete(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.CarService/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).FindById(ctx, req.(*CarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarPageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.CarService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Find(ctx, req.(*CarPageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.CarService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).Count(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contacts.CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CarService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CarService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CarService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _CarService_FindById_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _CarService_Find_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _CarService_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/contacts/contacts.proto",
}

// DeptServiceClient is the client API for DeptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeptServiceClient interface {
	Create(ctx context.Context, in *Dept, opts ...grpc.CallOption) (*DeptId, error)
	Update(ctx context.Context, in *Dept, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeptId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindById(ctx context.Context, in *DeptId, opts ...grpc.CallOption) (*Dept, error)
	Find(ctx context.Context, in *DeptPageQuery, opts ...grpc.CallOption) (*DeptWithCount, error)
	Count(ctx context.Context, in *Dept, opts ...grpc.CallOption) (*CountNumber, error)
	AddUser(ctx context.Context, in *DeptAddUserReq, opts ...grpc.CallOption) (*UserId, error)
	AddUserById(ctx context.Context, in *DeptIdAndUserId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveUser(ctx context.Context, in *DeptRemoveUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindUsers(ctx context.Context, in *DeptFindUsersReq, opts ...grpc.CallOption) (*DeptFindUsersRes, error)
}

type deptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeptServiceClient(cc grpc.ClientConnInterface) DeptServiceClient {
	return &deptServiceClient{cc}
}

func (c *deptServiceClient) Create(ctx context.Context, in *Dept, opts ...grpc.CallOption) (*DeptId, error) {
	out := new(DeptId)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) Update(ctx context.Context, in *Dept, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) Delete(ctx context.Context, in *DeptId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) FindById(ctx context.Context, in *DeptId, opts ...grpc.CallOption) (*Dept, error) {
	out := new(Dept)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) Find(ctx context.Context, in *DeptPageQuery, opts ...grpc.CallOption) (*DeptWithCount, error) {
	out := new(DeptWithCount)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) Count(ctx context.Context, in *Dept, opts ...grpc.CallOption) (*CountNumber, error) {
	out := new(CountNumber)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) AddUser(ctx context.Context, in *DeptAddUserReq, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) AddUserById(ctx context.Context, in *DeptIdAndUserId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/AddUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) RemoveUser(ctx context.Context, in *DeptRemoveUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) FindUsers(ctx context.Context, in *DeptFindUsersReq, opts ...grpc.CallOption) (*DeptFindUsersRes, error) {
	out := new(DeptFindUsersRes)
	err := c.cc.Invoke(ctx, "/contacts.DeptService/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeptServiceServer is the server API for DeptService service.
// All implementations must embed UnimplementedDeptServiceServer
// for forward compatibility
type DeptServiceServer interface {
	Create(context.Context, *Dept) (*DeptId, error)
	Update(context.Context, *Dept) (*emptypb.Empty, error)
	Delete(context.Context, *DeptId) (*emptypb.Empty, error)
	FindById(context.Context, *DeptId) (*Dept, error)
	Find(context.Context, *DeptPageQuery) (*DeptWithCount, error)
	Count(context.Context, *Dept) (*CountNumber, error)
	AddUser(context.Context, *DeptAddUserReq) (*UserId, error)
	AddUserById(context.Context, *DeptIdAndUserId) (*emptypb.Empty, error)
	RemoveUser(context.Context, *DeptRemoveUserReq) (*emptypb.Empty, error)
	FindUsers(context.Context, *DeptFindUsersReq) (*DeptFindUsersRes, error)
	mustEmbedUnimplementedDeptServiceServer()
}

// UnimplementedDeptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeptServiceServer struct {
}

func (UnimplementedDeptServiceServer) Create(context.Context, *Dept) (*DeptId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeptServiceServer) Update(context.Context, *Dept) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeptServiceServer) Delete(context.Context, *DeptId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeptServiceServer) FindById(context.Context, *DeptId) (*Dept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedDeptServiceServer) Find(context.Context, *DeptPageQuery) (*DeptWithCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedDeptServiceServer) Count(context.Context, *Dept) (*CountNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedDeptServiceServer) AddUser(context.Context, *DeptAddUserReq) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedDeptServiceServer) AddUserById(context.Context, *DeptIdAndUserId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserById not implemented")
}
func (UnimplementedDeptServiceServer) RemoveUser(context.Context, *DeptRemoveUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedDeptServiceServer) FindUsers(context.Context, *DeptFindUsersReq) (*DeptFindUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}
func (UnimplementedDeptServiceServer) mustEmbedUnimplementedDeptServiceServer() {}

// UnsafeDeptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeptServiceServer will
// result in compilation errors.
type UnsafeDeptServiceServer interface {
	mustEmbedUnimplementedDeptServiceServer()
}

func RegisterDeptServiceServer(s grpc.ServiceRegistrar, srv DeptServiceServer) {
	s.RegisterService(&DeptService_ServiceDesc, srv)
}

func _DeptService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).Create(ctx, req.(*Dept))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).Update(ctx, req.(*Dept))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).Delete(ctx, req.(*DeptId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).FindById(ctx, req.(*DeptId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptPageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).Find(ctx, req.(*DeptPageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).Count(ctx, req.(*Dept))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptAddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).AddUser(ctx, req.(*DeptAddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_AddUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptIdAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).AddUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/AddUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).AddUserById(ctx, req.(*DeptIdAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptRemoveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).RemoveUser(ctx, req.(*DeptRemoveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptFindUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.DeptService/FindUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).FindUsers(ctx, req.(*DeptFindUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeptService_ServiceDesc is the grpc.ServiceDesc for DeptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contacts.DeptService",
	HandlerType: (*DeptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DeptService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeptService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeptService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _DeptService_FindById_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _DeptService_Find_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _DeptService_Count_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _DeptService_AddUser_Handler,
		},
		{
			MethodName: "AddUserById",
			Handler:    _DeptService_AddUserById_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _DeptService_RemoveUser_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _DeptService_FindUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/contacts/contacts.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserId, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindById(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
	Find(ctx context.Context, in *UserPageQuery, opts ...grpc.CallOption) (*UserWithCount, error)
	Count(ctx context.Context, in *User, opts ...grpc.CallOption) (*CountNumber, error)
	AddCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarId, error)
	AddCarById(ctx context.Context, in *UserIdAndCarId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveCar(ctx context.Context, in *UserRemoveCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindCars(ctx context.Context, in *UserFindCarsReq, opts ...grpc.CallOption) (*UserFindCarsRes, error)
	FindDepts(ctx context.Context, in *UserFindDeptsReq, opts ...grpc.CallOption) (*UserFindDeptsRes, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/contacts.UserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.UserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindById(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/contacts.UserService/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Find(ctx context.Context, in *UserPageQuery, opts ...grpc.CallOption) (*UserWithCount, error) {
	out := new(UserWithCount)
	err := c.cc.Invoke(ctx, "/contacts.UserService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Count(ctx context.Context, in *User, opts ...grpc.CallOption) (*CountNumber, error) {
	out := new(CountNumber)
	err := c.cc.Invoke(ctx, "/contacts.UserService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarId, error) {
	out := new(CarId)
	err := c.cc.Invoke(ctx, "/contacts.UserService/AddCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddCarById(ctx context.Context, in *UserIdAndCarId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.UserService/AddCarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveCar(ctx context.Context, in *UserRemoveCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/contacts.UserService/RemoveCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindCars(ctx context.Context, in *UserFindCarsReq, opts ...grpc.CallOption) (*UserFindCarsRes, error) {
	out := new(UserFindCarsRes)
	err := c.cc.Invoke(ctx, "/contacts.UserService/FindCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindDepts(ctx context.Context, in *UserFindDeptsReq, opts ...grpc.CallOption) (*UserFindDeptsRes, error) {
	out := new(UserFindDeptsRes)
	err := c.cc.Invoke(ctx, "/contacts.UserService/FindDepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Create(context.Context, *User) (*UserId, error)
	Update(context.Context, *User) (*emptypb.Empty, error)
	Delete(context.Context, *UserId) (*emptypb.Empty, error)
	FindById(context.Context, *UserId) (*User, error)
	Find(context.Context, *UserPageQuery) (*UserWithCount, error)
	Count(context.Context, *User) (*CountNumber, error)
	AddCar(context.Context, *Car) (*CarId, error)
	AddCarById(context.Context, *UserIdAndCarId) (*emptypb.Empty, error)
	RemoveCar(context.Context, *UserRemoveCarReq) (*emptypb.Empty, error)
	FindCars(context.Context, *UserFindCarsReq) (*UserFindCarsRes, error)
	FindDepts(context.Context, *UserFindDeptsReq) (*UserFindDeptsRes, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Create(context.Context, *User) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserServiceServer) Update(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServiceServer) Delete(context.Context, *UserId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserServiceServer) FindById(context.Context, *UserId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedUserServiceServer) Find(context.Context, *UserPageQuery) (*UserWithCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedUserServiceServer) Count(context.Context, *User) (*CountNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedUserServiceServer) AddCar(context.Context, *Car) (*CarId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCar not implemented")
}
func (UnimplementedUserServiceServer) AddCarById(context.Context, *UserIdAndCarId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCarById not implemented")
}
func (UnimplementedUserServiceServer) RemoveCar(context.Context, *UserRemoveCarReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCar not implemented")
}
func (UnimplementedUserServiceServer) FindCars(context.Context, *UserFindCarsReq) (*UserFindCarsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCars not implemented")
}
func (UnimplementedUserServiceServer) FindDepts(context.Context, *UserFindDeptsReq) (*UserFindDeptsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDepts not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindById(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Find(ctx, req.(*UserPageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Count(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/AddCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddCarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndCarId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddCarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/AddCarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddCarById(ctx, req.(*UserIdAndCarId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRemoveCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/RemoveCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveCar(ctx, req.(*UserRemoveCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFindCarsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/FindCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindCars(ctx, req.(*UserFindCarsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindDepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFindDeptsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindDepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contacts.UserService/FindDepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindDepts(ctx, req.(*UserFindDeptsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contacts.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _UserService_FindById_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _UserService_Find_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _UserService_Count_Handler,
		},
		{
			MethodName: "AddCar",
			Handler:    _UserService_AddCar_Handler,
		},
		{
			MethodName: "AddCarById",
			Handler:    _UserService_AddCarById_Handler,
		},
		{
			MethodName: "RemoveCar",
			Handler:    _UserService_RemoveCar_Handler,
		},
		{
			MethodName: "FindCars",
			Handler:    _UserService_FindCars_Handler,
		},
		{
			MethodName: "FindDepts",
			Handler:    _UserService_FindDepts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/contacts/contacts.proto",
}
